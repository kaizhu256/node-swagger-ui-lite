{"/home/travis/build/kaizhu256/node-swagger-ui-lite/test.js":"/* istanbul instrument in package swagger_ui */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init local\n    local = {};\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelectorAll === \"function\"\n    );\n    globalThis.globalLocal = local;\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (globalThis.utility2 || require(\"utility2\")).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\n    local.testCase_buildApidoc_default = function (options, onError) {\n    /*\n     * this function will test buildApidoc's default handling-behavior-behavior\n     */\n        if (local.isBrowser) {\n            onError(null, options);\n            return;\n        }\n        options = {};\n        options.global = local.objectSetDefault({}, globalThis);\n        options.polyfill = function () {\n            var $;\n            var Backbone;\n            var Handlebars;\n            var window;\n            $ = function (value) {\n            /*\n             * this function will return <value>\n             */\n                return value;\n            };\n            Backbone = $;\n            Handlebars = $;\n            // jslint-hack\n            $(Backbone, Handlebars, window);\n            [\n                \"Collection\",\n                \"Model\",\n                \"Router\",\n                \"View\",\n                \"extend\",\n                \"registerHelper\",\n                \"template\"\n            ].forEach(function (key) {\n                $[key] = $;\n            });\n            window = globalThis;\n        };\n        // coverage-hack\n        options.polyfill();\n        local.vm.runInThisContext(local.jslintAndPrint(\n/* jslint ignore:start */\n'\\\n/*jslint\\n\\\n    node: true\\n\\\n*/\\n\\\n\"use strict\";\\n\\\nvar $;\\n\\\nvar Backbone;\\n\\\nvar Handlebars;\\n\\\nvar window;\\n\\\n$ = Backbone = Handlebars = function (arg0) {\\n\\\n    return arg0;\\n\\\n};\\n\\\n// jslint-hack\\n\\\n$(Backbone, Handlebars, window);\\n\\\n[\\n\\\n    \"Collection\",\\n\\\n    \"Model\",\\n\\\n    \"Router\",\\n\\\n    \"View\",\\n\\\n    \"extend\",\\n\\\n    \"registerHelper\",\\n\\\n    \"template\"\\n\\\n].forEach(function (key) {\\n\\\n    $[key] = $;\\n\\\n});\\n\\\nwindow = global;\\n\\\n', 'polyfill.js'\n/* jslint ignore:end */\n        ) + local.fs.readFileSync(\"assets.swagger_ui.rollup.js\", \"utf8\")\n        .replace((\n            /^\\/\\/\\u0020init\\u0020lib\\u0020[\\S\\s]*?\\n\\n\\n\\n/gm\n        ), function (match0) {\n            if (match0.indexOf(\"init lib swagger\") < 0) {\n                return \"\";\n            }\n            return match0;\n        }));\n        options.exports = local.objectSetDefault({}, globalThis);\n        Object.keys(options.exports).forEach(function (key) {\n            if (options.exports[key] === options.global[key]) {\n                delete options.exports[key];\n            }\n        });\n        delete options.exports.$.Backbone;\n        delete options.exports.$.Handlebars;\n        delete options.exports.Backbone;\n        delete options.exports.Handlebars;\n        delete options.exports.$;\n        options.moduleDict = {\n            exampleFileList: [\"assets.swagger_ui.rollup.js\"],\n            swagger_ui: {\n                exports: options.exports\n            }\n        };\n        local.buildApidoc(options, onError);\n    };\n\n    local.testCase_buildApp_default = function (options, onError) {\n    /*\n     * this function will test buildApp's default handling-behavior-behavior\n     */\n        if (local.isBrowser) {\n            onError(null, options);\n            return;\n        }\n        local.testCase_buildReadme_default(options, local.onErrorThrow);\n        local.testCase_buildLib_default(options, local.onErrorThrow);\n        local.testCase_buildTest_default(options, local.onErrorThrow);\n        local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n        options = {\n            assetsList: [{\n                file: \"/assets.swagger_ui.html\",\n                url: \"/assets.swagger_ui.html\"\n            }, {\n                file: \"/assets.swagger_ui.petstore.json\",\n                url: \"/assets.swagger_ui.petstore.json\"\n            }, {\n                file: \"/assets.swagger_ui.rollup.js\",\n                url: \"/assets.swagger_ui.rollup.js\"\n            }]\n        };\n        local.buildApp(options, onError);\n    };\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-swagger-ui-lite/lib.swagger_ui.js":"// usr/bin/env node\n/*\n * lib.swagger_ui.js (2018.8.11)\n * https://github.com/kaizhu256/node-swagger-ui-lite\n * this zero-dependency package will provide a rollup, single-script version of the swagger-ui client (v2.1.5), with a working web-demo\n *\n */\n\n\n\n/* istanbul instrument in package swagger_ui */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init local\n    local = {};\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelectorAll === \"function\"\n    );\n    globalThis.globalLocal = local;\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n/* istanbul ignore next */\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    // || globalThis.utility2_rollup_old\n    // || require(\"./assets.utility2.rollup.js\")\n    || globalThis.globalLocal\n);\n// init exports\nif (local.isBrowser) {\n    globalThis.utility2_swagger_ui = local;\n} else {\n    // require builtins\n    local.assert = require(\"assert\");\n    local.buffer = require(\"buffer\");\n    local.child_process = require(\"child_process\");\n    local.cluster = require(\"cluster\");\n    local.crypto = require(\"crypto\");\n    local.dgram = require(\"dgram\");\n    local.dns = require(\"dns\");\n    local.domain = require(\"domain\");\n    local.events = require(\"events\");\n    local.fs = require(\"fs\");\n    local.http = require(\"http\");\n    local.https = require(\"https\");\n    local.net = require(\"net\");\n    local.os = require(\"os\");\n    local.path = require(\"path\");\n    local.querystring = require(\"querystring\");\n    local.readline = require(\"readline\");\n    local.repl = require(\"repl\");\n    local.stream = require(\"stream\");\n    local.string_decoder = require(\"string_decoder\");\n    local.timers = require(\"timers\");\n    local.tls = require(\"tls\");\n    local.tty = require(\"tty\");\n    local.url = require(\"url\");\n    local.util = require(\"util\");\n    local.vm = require(\"vm\");\n    local.zlib = require(\"zlib\");\n    module.exports = local;\n    module.exports.__dirname = __dirname;\n}\n// init lib main\nlocal.local = local;\nlocal.swagger_ui = local;\n\n\n\n/* validateLineSortedReset */\nreturn;\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\n    if (local.isBrowser) {\n        return;\n    }\n    // init assets\n    local.assetsDict = local.assetsDict || {};\n    local.fs.readdirSync(local.__dirname).forEach(function (file) {\n        file = \"/\" + file;\n        if (file.indexOf(\"/assets.\") === 0) {\n            local.assetsDict[file] = (\n                local.assetsDict[file] || local.fs.readFileSync(local.__dirname + file, \"utf8\")\n            );\n        }\n    });\n    local.assetsDict[\"/assets.swagger_ui.html\"] = (\n        local.assetsDict[\"/assets.index.template.html\"]\n    );\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-swagger-ui-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of swagger-ui-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell-command:\n        $ npm install kaizhu256/node-swagger-ui-lite#alpha && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package swagger_ui */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init local\n    local = {};\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelectorAll === \"function\"\n    );\n    globalThis.globalLocal = local;\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    || globalThis.utility2_swagger_ui\n    || globalThis.utility2_moduleExports\n);\n// init exports\nglobalThis.local = local;\n}());\n\n\n\n/* istanbul ignore next */\n// run browser js-env code - init-test\n(function () {\nif (!local.isBrowser) {\n    return;\n}\n}());\n\n\n\n/* istanbul ignore next */\n// run node js-env code - init-test\n(function () {\nif (local.isBrowser) {\n    return;\n}\n// init exports\nmodule.exports = local;\n// require builtins\nlocal.assert = require(\"assert\");\nlocal.buffer = require(\"buffer\");\nlocal.child_process = require(\"child_process\");\nlocal.cluster = require(\"cluster\");\nlocal.crypto = require(\"crypto\");\nlocal.dgram = require(\"dgram\");\nlocal.dns = require(\"dns\");\nlocal.domain = require(\"domain\");\nlocal.events = require(\"events\");\nlocal.fs = require(\"fs\");\nlocal.http = require(\"http\");\nlocal.https = require(\"https\");\nlocal.net = require(\"net\");\nlocal.os = require(\"os\");\nlocal.path = require(\"path\");\nlocal.querystring = require(\"querystring\");\nlocal.readline = require(\"readline\");\nlocal.repl = require(\"repl\");\nlocal.stream = require(\"stream\");\nlocal.string_decoder = require(\"string_decoder\");\nlocal.timers = require(\"timers\");\nlocal.tls = require(\"tls\");\nlocal.tty = require(\"tty\");\nlocal.url = require(\"url\");\nlocal.util = require(\"util\");\nlocal.vm = require(\"vm\");\nlocal.zlib = require(\"zlib\");\n/* validateLineSortedReset */\n// init assets\nlocal.assetsDict = local.assetsDict || {};\n[\n    \"assets.index.template.html\",\n    \"assets.swgg.swagger.json\",\n    \"assets.swgg.swagger.server.json\"\n].forEach(function (file) {\n    file = \"/\" + file;\n    local.assetsDict[file] = local.assetsDict[file] || \"\";\n    if (local.fs.existsSync(local.__dirname + file)) {\n        local.assetsDict[file] = local.fs.readFileSync(\n            local.__dirname + file,\n            \"utf8\"\n        );\n    }\n});\n/* validateLineSortedReset */\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.swagger_ui.js\"] =\n    local.assetsDict[\"/assets.swagger_ui.js\"] ||\n    local.fs.readFileSync(local.__dirname + \"/lib.swagger_ui.js\", \"utf8\"\n).replace((/^#!\\//), \"// \");\n/* jslint ignore:end */\n/* validateLineSortedReset */\nlocal.assetsDict[\"/\"] = local.assetsDict[\"/assets.index.template.html\"]\n.replace((\n    /\\{\\{env\\.(\\w+?)\\}\\}/g\n), function (match0, match1) {\n    switch (match1) {\n    case \"npm_package_description\":\n        return \"the greatest app in the world!\";\n    case \"npm_package_name\":\n        return \"swagger-ui-lite\";\n    case \"npm_package_nameLib\":\n        return \"swagger_ui\";\n    case \"npm_package_version\":\n        return \"0.0.1\";\n    default:\n        return match0;\n    }\n});\nlocal.assetsDict[\"/assets.example.html\"] = local.assetsDict[\"/\"];\nlocal.assetsDict[\"/index.html\"] = local.assetsDict[\"/\"];\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\n/* validateLineSortedReset */\nlocal.assetsDict[\"/assets.example.js\"] = (\n    local.assetsDict[\"/assets.example.js\"]\n    || local.fs.readFileSync(__filename, \"utf8\")\n);\nlocal.assetsDict[\"/favicon.ico\"] = local.assetsDict[\"/favicon.ico\"] || \"\";\n// if $npm_config_timeout_exit exists,\n// then exit this process after $npm_config_timeout_exit ms\nif (Number(process.env.npm_config_timeout_exit)) {\n    setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n}\n// start server\nif (globalThis.utility2_serverHttp1) {\n    return;\n}\nprocess.env.PORT = process.env.PORT || \"8081\";\nconsole.error(\"server starting on port \" + process.env.PORT);\nlocal.http.createServer(function (request, response) {\n    request.urlParsed = local.url.parse(request.url);\n    if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n        response.end(local.assetsDict[request.urlParsed.pathname]);\n        return;\n    }\n    response.statusCode = 404;\n    response.end();\n}).listen(process.env.PORT);\n}());\n\n\n\n}());"}